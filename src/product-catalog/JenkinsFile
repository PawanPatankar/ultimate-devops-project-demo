pipeline {
    agent { 
        docker { 
            image 'jenkins/agent'  // Uses a Docker container as the main agent
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'  // Mount Docker socket for running containers
        }
    }

    environment {
        DOCKER_IMAGE = "pawan03/product-catalog:${BUILD_NUMBER}"
        GIT_REPO_NAME = "ultimate-devops-project-demo"
        GIT_USER_NAME = "PawanPatankar"
        SONAR_URL = "http://65.2.170.208:9000"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Setup Go & Build') {
            agent {
                docker {
                    image 'golang:1.22'
                    args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                script {
                    sh '''
                    cd src/product-catalog
                    go mod download
                    go build -o product-catalog-service main.go
                    '''
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    sh '''
                    cd src/product-catalog
                    go test ./...
                    '''
                }
            }
        }

        stage('SonarQube Analysis') {
            environment {
                SONAR_AUTH_TOKEN = credentials('sonarqube')
            }
            steps {
                script {
                    sh '''
                    cd src/product-catalog
                    sonar-scanner \
                      -Dsonar.projectKey=product-catalog \
                      -Dsonar.sources=. \
                      -Dsonar.host.url=${SONAR_URL} \
                      -Dsonar.login=${SONAR_AUTH_TOKEN} \
                      -Dsonar.language=go \
                      -Dsonar.sourceEncoding=UTF-8
                    '''
                }
            }
        }

        stage('Build & Push Docker Image') {
            environment {
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh '''
                    cd src/product-catalog
                    docker build -t ${DOCKER_IMAGE} .
                    '''
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Kubernetes Deployment') {
            environment {
                GITHUB_TOKEN = credentials('github')
            }
            steps {
                script {
                    sh '''
                    git config user.email "pawan@gmail.com"
                    git config user.name "Pawan Patankar"
                    sed -i "s|image: .*|image: ${DOCKER_IMAGE}|" kubernetes/productcatalog/deploy.yaml
                    git add kubernetes/productcatalog/deploy.yaml
                    git commit -m "[CI]: Update product catalog image tag"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "Deployment successful!"
        }
        failure {
            echo "Deployment failed!"
        }
    }
}
